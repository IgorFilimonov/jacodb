/*
 * This file is generated by jOOQ.
 */
package org.utbot.jcdb.impl.storage.jooq.tables


import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.utbot.jcdb.impl.storage.jooq.DefaultSchema
import org.utbot.jcdb.impl.storage.jooq.tables.records.CallsRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Calls(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CallsRecord>?,
    aliased: Table<CallsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<CallsRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>Calls</code>
         */
        val CALLS = Calls()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CallsRecord> = CallsRecord::class.java

    /**
     * The column <code>Calls.callee_class_hash</code>.
     */
    val CALLEE_CLASS_HASH: TableField<CallsRecord, Long?> = createField(DSL.name("callee_class_hash"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>Calls.callee_name</code>.
     */
    val CALLEE_NAME: TableField<CallsRecord, String?> = createField(DSL.name("callee_name"), SQLDataType.VARCHAR(256), this, "")

    /**
     * The column <code>Calls.callee_desc_hash</code>.
     */
    val CALLEE_DESC_HASH: TableField<CallsRecord, Long?> = createField(DSL.name("callee_desc_hash"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>Calls.opcode</code>.
     */
    val OPCODE: TableField<CallsRecord, Int?> = createField(DSL.name("opcode"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>Calls.caller_class_hash</code>.
     */
    val CALLER_CLASS_HASH: TableField<CallsRecord, Long?> = createField(DSL.name("caller_class_hash"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>Calls.location_id</code>.
     */
    val LOCATION_ID: TableField<CallsRecord, Long?> = createField(DSL.name("location_id"), SQLDataType.BIGINT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<CallsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<CallsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>Calls</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>Calls</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>Calls</code> table reference
     */
    constructor(): this(DSL.name("Calls"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, CallsRecord>): this(Internal.createPathAlias(child, key), child, key, CALLS, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getIndexes(): List<Index> = listOf(org.utbot.jcdb.impl.storage.jooq.indexes.`CALLS SEARCH`)
    override fun `as`(alias: String): Calls = Calls(DSL.name(alias), this)
    override fun `as`(alias: Name): Calls = Calls(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Calls = Calls(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Calls = Calls(name, null)

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<Long?, String?, Long?, Int?, Long?, Long?> = super.fieldsRow() as Row6<Long?, String?, Long?, Int?, Long?, Long?>
}
