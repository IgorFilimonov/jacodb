/*
 * This file is generated by jOOQ.
 */
package org.utbot.jcdb.impl.storage.jooq.tables


import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row9
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.utbot.jcdb.impl.storage.jooq.DefaultSchema
import org.utbot.jcdb.impl.storage.jooq.keys.CLASSES__
import org.utbot.jcdb.impl.storage.jooq.tables.records.ClassesRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Classes(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ClassesRecord>?,
    aliased: Table<ClassesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ClassesRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>Classes</code>
         */
        val CLASSES: Classes = Classes()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ClassesRecord> = ClassesRecord::class.java

    /**
     * The column <code>Classes.id</code>.
     */
    val ID: TableField<ClassesRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>Classes.access</code>.
     */
    val ACCESS: TableField<ClassesRecord, Int?> = createField(DSL.name("access"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>Classes.name</code>.
     */
    val NAME: TableField<ClassesRecord, Long?> = createField(DSL.name("name"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>Classes.signature</code>.
     */
    val SIGNATURE: TableField<ClassesRecord, String?> = createField(DSL.name("signature"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>Classes.bytecode</code>.
     */
    val BYTECODE: TableField<ClassesRecord, ByteArray?> = createField(DSL.name("bytecode"), SQLDataType.BLOB.nullable(false), this, "")

    /**
     * The column <code>Classes.location_id</code>.
     */
    val LOCATION_ID: TableField<ClassesRecord, Long?> = createField(DSL.name("location_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>Classes.package_id</code>.
     */
    val PACKAGE_ID: TableField<ClassesRecord, Long?> = createField(DSL.name("package_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>Classes.outer_class</code>.
     */
    val OUTER_CLASS: TableField<ClassesRecord, Long?> = createField(DSL.name("outer_class"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>Classes.outer_method</code>.
     */
    val OUTER_METHOD: TableField<ClassesRecord, Long?> = createField(DSL.name("outer_method"), SQLDataType.BIGINT, this, "")

    private constructor(alias: Name, aliased: Table<ClassesRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ClassesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>Classes</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>Classes</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>Classes</code> table reference
     */
    constructor(): this(DSL.name("Classes"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ClassesRecord>): this(Internal.createPathAlias(child, key), child, key, CLASSES, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getPrimaryKey(): UniqueKey<ClassesRecord> = CLASSES__
    override fun `as`(alias: String): Classes = Classes(DSL.name(alias), this)
    override fun `as`(alias: Name): Classes = Classes(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Classes = Classes(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Classes = Classes(name, null)

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row9<Long?, Int?, Long?, String?, ByteArray?, Long?, Long?, Long?, Long?> = super.fieldsRow() as Row9<Long?, Int?, Long?, String?, ByteArray?, Long?, Long?, Long?, Long?>
}
