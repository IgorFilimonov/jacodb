/*
 * This file is generated by jOOQ.
 */
package org.utbot.jcdb.impl.storage.jooq.tables


import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.utbot.jcdb.impl.storage.jooq.DefaultSchema
import org.utbot.jcdb.impl.storage.jooq.keys.CLASSINNERCLASSES__
import org.utbot.jcdb.impl.storage.jooq.tables.records.ClassinnerclassesRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Classinnerclasses(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ClassinnerclassesRecord>?,
    aliased: Table<ClassinnerclassesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ClassinnerclassesRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>ClassInnerClasses</code>
         */
        val CLASSINNERCLASSES: Classinnerclasses = Classinnerclasses()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ClassinnerclassesRecord> = ClassinnerclassesRecord::class.java

    /**
     * The column <code>ClassInnerClasses.id</code>.
     */
    val ID: TableField<ClassinnerclassesRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>ClassInnerClasses.class_id</code>.
     */
    val CLASS_ID: TableField<ClassinnerclassesRecord, Long?> = createField(DSL.name("class_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>ClassInnerClasses.inner_class_id</code>.
     */
    val INNER_CLASS_ID: TableField<ClassinnerclassesRecord, Long?> = createField(DSL.name("inner_class_id"), SQLDataType.BIGINT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ClassinnerclassesRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ClassinnerclassesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>ClassInnerClasses</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>ClassInnerClasses</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>ClassInnerClasses</code> table reference
     */
    constructor(): this(DSL.name("ClassInnerClasses"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ClassinnerclassesRecord>): this(Internal.createPathAlias(child, key), child, key, CLASSINNERCLASSES, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getPrimaryKey(): UniqueKey<ClassinnerclassesRecord> = CLASSINNERCLASSES__
    override fun `as`(alias: String): Classinnerclasses = Classinnerclasses(DSL.name(alias), this)
    override fun `as`(alias: Name): Classinnerclasses = Classinnerclasses(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Classinnerclasses = Classinnerclasses(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Classinnerclasses = Classinnerclasses(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Long?, Long?, Long?> = super.fieldsRow() as Row3<Long?, Long?, Long?>
}
